
from slovar import choose_word, bucvar
from utils import display_word
from random import randint, choice

import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder as IB


from models import User

bot = Bot(token='BOT TOKEN')
dp = Dispatcher()


def get_or_create_user(from_user: types.User):
    user_id = from_user.id
    user = User.get_or_none(id = user_id)
    if user is None:
        user = User.create(id = user_id, balance =50)
    return user


shop_items = [
        {"name": "1Ô∏è‚É£–û—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–≤—É—é –±—É–∫–≤—É1Ô∏è‚É£", "price": 60, "callback_data": "shop-open_first_letter"},
        {"name": "üé≤–û—Ç–∫—Ä—ã—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—É—é –±—É–∫–≤—Éüé≤", "price": 50, "callback_data": "shop-open_random_letter"},
        {"name": "üé∞–õ–æ—Ç–µ—Ä–µ—èüé∞", "price": 25, "callback_data": "shop-bonus"},
        {"name": "*Ô∏è‚É£–ú–Ω–æ–∂–∏—Ç–µ–ª—å –±–æ–Ω—É—Å–∞*Ô∏è‚É£", "price": 80, "callback_data": "shop-bonus_money"},
        {"name": "üì∑–ö—É–ø—ñ–≤–ª—è —Å–ø—Ä–æ–±üì∑", "price": 10, "callback_data": "shop-bonus_attemps"},
    ]

# ----------------------------------------------------


main_keyboard = IB()
main_keyboard.row(types.InlineKeyboardButton(text="üéÆ–ì—Ä–∞—Ç–∏", callback_data="start_game"))
main_keyboard.row(types.InlineKeyboardButton(text="üìù–ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"))
#–î–æ–ø–æ–º–æ–≥–∞
main_keyboard.row(types.InlineKeyboardButton(text="üíä–î–æ–ø–æ–º–æ–≥–∞", callback_data="help"))

main_back_keyboard = IB()
main_back_keyboard_but =types.InlineKeyboardButton(text='üëà –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data='main_back')
main_back_keyboard.row(main_back_keyboard_but)

game_keyboard = IB()
game_keyboard.row(types.InlineKeyboardButton(text="üí∞–ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"))



@dp.message(Command("start"))
async def send_welcome(message: Message):
    user = get_or_create_user(message.from_user)
    text = f'–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}! –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∑—ñ–≥—Ä–∞—Ç–∏ –≤ –≥—Ä—É "–í–∏—Å–µ–ª–∏—Ü—è".'
    await message.answer(text, reply_markup=main_keyboard.as_markup())
    
@dp.callback_query(F.data == "help")
async def help_menu_call(call: types.CallbackQuery):
    text= f'–í —Ü—ñ–π –≥—Ä—ñ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–≥–∞–¥–∞—Ç–∏ —Å–ª–æ–≤–æ, —è–∫–µ –≤–∏–±–µ—Ä–µ –±–æ—Ç. –í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–≥–∞–¥—É–≤–∞—Ç–∏ –ø–æ –æ–¥–Ω—ñ–π –±—É–∫–≤—ñ. –Ø–∫—â–æ –≤–∏ –≤—ñ–¥–≥–∞–¥–∞–ª–∏ –±—É–∫–≤—É, —Ç–æ –≤–æ–Ω–∞ –∑\'—è–≤–∏—Ç—å—Å—è –Ω–∞ —Å–≤–æ—î–º—É –º—ñ—Å—Ü—ñ. –Ø–∫—â–æ –±—É–∫–≤–∏ –Ω–µ–º–∞—î –≤ —Å–ª–æ–≤—ñ, —Ç–æ –≤–∏ –≤—Ç—Ä–∞—á–∞—î—Ç–µ —Å–ø—Ä–æ–±—É. –Ø–∫—â–æ –≤–∏ –≤—ñ–¥–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ, —Ç–æ –≤–∏ –≤–∏–≥—Ä–∞–ª–∏. –Ø–∫—â–æ –≤–∏ –≤—Ç—Ä–∞—Ç–∏–ª–∏ –≤—Å—ñ —Å–ø—Ä–æ–±–∏, —Ç–æ –≤–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏.'
    await call.message.edit_text(text, reply_markup=main_back_keyboard.as_markup())

@dp.callback_query(F.data == "profile")
async def profile_menu_call(call: types.CallbackQuery):
    user = get_or_create_user(call.from_user)
    text= f'–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}\n–í–∞—à—ñ –ø–µ—Ä–µ–º–æ–≥–∏: {user.victory}\n–í–∞—à—ñ –ø–æ—Ä–∞–∑–∫–∏: {user.defeat}\n–£—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–µ–Ω–µ–≥: {user.bonus_multiplier}\n–í–∞—à –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∞–≤–µ–Ω: {user.bonus_multiplier / 10}'
    await call.message.edit_text(text, reply_markup=main_back_keyboard.as_markup())
    

@dp.callback_query(F.data == "main_back")
async def main_back_menu_call(call: types.CallbackQuery):
    await call.message.edit_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_keyboard.as_markup())


# ----------------------------------------------------


@dp.callback_query(F.data == "start_game")
async def start_game_call(call: types.CallbackQuery):
    user = get_or_create_user(call.from_user)
    if user.is_playing:
        text= f'–í–∏ –≤–∂–µ –≥—Ä–∞—î—Ç–µ –≤ –≥—Ä—É. –î–∞–≤–∞–π—Ç–µ —è –≤–∞–º –Ω–∞–≥–∞–¥–∞—é —Å–ª–æ–≤–æ: {display_word(user.word, user.guessed_letters)}\n –í–≤–µ–¥—ñ—Ç—å –±—É–∫–≤—É —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–≥–∞–¥–∞—Ç–∏.\n–£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {user.attempts}'
        text+= f'\n–í–≤–µ–¥–µ–Ω—ñ –ª—ñ—Ç–µ—Ä–∏: {user.guessed_letters}'
        await call.message.edit_text(text)
        return
    user.is_playing = True
    user.word = choose_word()
    user.attempts = 10
    user.guessed_letters = ""
    user.save()
    text = f'–í–∏ –ø–æ—á–∞–ª–∏ –≥—Ä—É. –í–≤–µ–¥—ñ—Ç—å –±—É–∫–≤—É —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–≥–∞–¥–∞—Ç–∏.\n–£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {user.attempts}\n{display_word(user.word, user.guessed_letters)}'
    await call.message.edit_text(text)



@dp.message()
async def some_message(message: types.Message):
    user = get_or_create_user(message.from_user)
    if not user.is_playing:
        await message.answer("–î–∞–≤–∞–π—Ç–µ –ø–æ–≥—Ä–∞—î–º–æ –≤ –í–∏—Å–µ–ª–∏—Ü–∞! \n –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_back_keyboard.as_markup())
        return
    


    user_answer = message.text.lower()[0]
    if user_answer not in bucvar:
        await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π —Å–∏–º–≤–æ–ª. –¢—ñ–ª—å–∫–∏ –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏.")
        return
    
    if user_answer in user.guessed_letters:
        await message.answer("–í–∏ –≤–∂–µ –≤–≤–µ–ª–∏ —Ü—é –ª—ñ—Ç–µ—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π.")
        return
    
    user.guessed_letters = user.guessed_letters+user_answer
    user.save()
    zapataia = ", ".join(user.guessed_letters)
    if user_answer not in user.word:
        user.attempts -= 1
        user.save()
        text = f"–í–∏ –Ω–µ –≤–≥–∞–¥–∞–ª–∏!\n–£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {user.attempts}\n{display_word(user.word, user.guessed_letters)}\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –±—É–∫–≤–∏ {zapataia}"
        if user.attempts == 0: # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å–ø—Ä–æ–±–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è
            user.is_playing = False
            user.defeat += 1
            user.save()
            text = f"–ù–∞ –∂–∞–ª—å, –≤–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏. –ü—Ä–∏—Ö–æ–≤–∞–Ω–µ —Å–ª–æ–≤–æ –±—É–ª–æ: {user.word}"
            await message.answer(text, reply_markup=main_back_keyboard.as_markup())
            return
    else:
        text = f"–í–∏ –≤–≥–∞–¥–∞–ª–∏!\n{display_word(user.word, user.guessed_letters)}\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –±—É–∫–≤–∏ {zapataia}"
        if "_" not in display_word(user.word, user.guessed_letters): # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤—Å—ñ –±—É–∫–≤–∏ –≤—ñ–¥–≥–∞–¥–∞–Ω—ñ —Ç–æ –≤–∏–≥—Ä–∞—à
            user.is_playing = False
            user.balance = user.balance + 30 + (30 * user.bonus_multiplier / 10)
            user.victory += 1 
            user.save()
            text = f"–í—ñ—Ç–∞—î–º–æ, –≤–∏ –≤–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: {user.word}"
            await message.answer(text, reply_markup=main_back_keyboard.as_markup())
            return
    
    
    await message.answer(text, reply_markup=game_keyboard.as_markup())
    


@dp.callback_query(F.data == "shop")
async def shop_menu_call(call: types.CallbackQuery):
    user = get_or_create_user(call.from_user)
    if user is None or not user.is_playing:
        await call.message.edit_text("–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –≥—Ä—É. –ü–æ—á–Ω—ñ—Ç—å –≥—Ä—É –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.")
        return
    
    shop_items_text = "\n".join([f"{item['name']} - {item['price']}üí∞" for item in shop_items])
    shop_keyboard = IB()
    shop_keyboard.row(types.InlineKeyboardButton(text="üëà –ù–∞–∑–∞–¥", callback_data="game_back"))
    for item in shop_items:
        shop_keyboard.row(types.InlineKeyboardButton(text=item["name"], callback_data=item["callback_data"]))


    text = f"=== –ú–∞–≥–∞–∑–∏–Ω ===\n{shop_items_text}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}üí∞\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É."
    await call.message.edit_text(text, reply_markup=shop_keyboard.as_markup())
    
@dp.callback_query(F.data == "game_back")
async def game_back_menu_call(call: types.CallbackQuery):
    user = get_or_create_user(call.from_user)
    if user.is_playing:
        text= f'–í–∏ –≤–∂–µ –≥—Ä–∞—î—Ç–µ –≤ –≥—Ä—É. –î–∞–≤–∞–π—Ç–µ —è –≤–∞–º –Ω–∞–≥–∞–¥–∞—é —Å–ª–æ–≤–æ: {display_word(user.word, user.guessed_letters)}\n –í–≤–µ–¥—ñ—Ç—å –±—É–∫–≤—É —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–≥–∞–¥–∞—Ç–∏.\n–£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {user.attempts}'
        text+= f'\n–í–≤–µ–¥–µ–Ω—ñ –ª—ñ—Ç–µ—Ä–∏: {user.guessed_letters}'
        await call.message.edit_text(text, reply_markup=game_keyboard.as_markup())
        return
    await call.message.edit_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_keyboard.as_markup())
    
    
@dp.callback_query(F.data.startswith("shop-"))
async def shop_item_call(call: types.CallbackQuery):
    user = get_or_create_user(call.from_user)
    if user is None:
        await call.message.edit_text("–í–∏ –Ω–µ –≥—Ä–∞—î—Ç–µ –≤ –≥—Ä—É. –ü–æ—á–Ω—ñ—Ç—å –≥—Ä—É –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=main_keyboard.as_markup())
        return
    
    item_name = call.data.split("-")[1]
    
    item = next((item for item in shop_items if item["callback_data"] == call.data), None) # –ø–æ—à—É–∫ —Ç–æ–≤–∞—Ä—É –≤ –º–∞–≥–∞–∑–∏–Ω—ñ
    if item is None:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!", show_alert=True)
        return

    if user.balance < item["price"]:
        await call.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤", show_alert=True)
        return
    
    if item_name == "bonus":
        bonus = randint(2, 50)
        user.balance += bonus
        user.balance -= item["price"]
        user.save()
        await call.answer(f'–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å: {bonus}üí∞\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}üí∞\n–í–∞—à –ø—Ä–æ—Ñ–∏—Ç: {bonus - 25}', show_alert=True)
        return
    if item_name == "open_first_letter":
        user.balance -= item["price"]
        user.guessed_letters = user.guessed_letters+user.word[0]
        user.save()
        text = f'–ü–µ—Ä—à–∞ –±—É–∫–≤–∞: {user.word[0]}\n{display_word(user.word, user.guessed_letters)}'
        await call.answer(text, show_alert=True)
        return
    if item_name == "open_random_letter":
        user.balance -= item["price"]
        user.guessed_letters = user.guessed_letters+choice(user.word)
        user.save()
        text = f'–†–∞–Ω–¥–æ–º–Ω–∞ –±—É–∫–≤–∞: {user.word[0]}\n{display_word(user.word, user.guessed_letters)}'
        await call.answer(text, show_alert=True)
        return
    if item_name == "bonus_money":
        user.balance -= item["price"]
        user.bonus_multiplier += 1
        text = f'–£—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –∑–∞ –ø–æ–±–µ–¥—É —Ä–∞–≤–∞–µ–Ω: {user.bonus_multiplier}'
        user.save()
        await call.answer(text, show_alert=True)
        return
    if item_name == "bonus_attemps":
        user.balance -= item["price"]
        user.attempts += 1
        text = f'–í–∞—à—ñ —Å–ø—Ä–æ–±–∏ —Ä—ñ–≤–Ω—ñ: {user.attempts}'
        user.save()
        await call.answer(text, show_alert=True)
        return

        

        
async def main():
    print("Starting bot...")
    print("Bot username: @{}".format((await bot.me())))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
